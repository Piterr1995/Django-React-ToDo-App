{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todoList","activeItem","id","title","completed","editing","fetchTask","axios","get","then","res","console","log","data","setState","handleChange","e","value","target","handleSubmit","preventDefault","url","post","catch","err","startEdit","task","deleteItem","delete","strikeUnstrike","this","tasks","className","onSubmit","style","flex","onChange","placeholder","name","type","map","index","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e08454cb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    activeItem: {\n      id: null,\n      title: \"\",\n      completed: false,\n    },\n    editing: false,\n  };\n\n  // Tak ma wyglądać funkcja, żeby nie trzeba było bindować\n  fetchTask = () => {\n    axios.get(\"http://127.0.0.1:8000/api/task-list\").then((res) => {\n      console.log(res.data);\n      this.setState({\n        todoList: res.data,\n      });\n    });\n  };\n\n  // żeby odpalić funkcję fetch task, trzeba dać this.fetchTask().\n  // inaczej nie zadziała, mimo, że nie przyjmuje argumentów to należy użyć ()\n  componentDidMount() {\n    this.fetchTask();\n  }\n\n  handleChange = (e) => {\n    // let name = e.target.name; // da nam wartość name z inputu\n    let value = e.target.value;\n    // console.log(\"Name\", name);\n    // console.log(\"Value\", value);\n\n    this.setState({\n      activeItem: {\n        ...this.state.activeItem,\n        title: value,\n      },\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"Item: \", this.state.activeItem);\n\n    let url = \"http://127.0.0.1:8000/api/task-create/\";\n    // axios.post(url, { headers: { \"Content-Type\": \"application/json\" } });\n\n    if (this.state.editing) {\n      url = `http://127.0.0.1:8000/api/task-update/${this.state.activeItem.id}/`;\n      this.setState({\n        editing: false,\n      });\n    }\n\n    axios\n      .post(url, this.state.activeItem) //postuje słownika activeItem do backendu\n      .then((res) => {\n        console.log(res);\n        this.fetchTask(); //pobiera listę\n        this.setState({\n          // resetuje stan activeItem\n          activeItem: {\n            id: null,\n            title: \"\",\n            completed: false,\n          },\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  startEdit = (task) => {\n    this.setState({\n      activeItem: task,\n      editing: true,\n    });\n  };\n\n  deleteItem = (task) => {\n    axios\n      .delete(`http://127.0.0.1:8000/api/task-delete/${task.id}/`)\n      .then((res) => {\n        this.fetchTask();\n        console.log(res);\n      });\n  };\n\n  strikeUnstrike = (task) => {\n    task.completed = !task.completed;\n    let url = `http://127.0.0.1:8000/api/task-update/${task.id}/`;\n\n    axios\n      .post(url, { completed: task.completed, title: task.title })\n      .then(() => {\n        this.fetchTask(); //robimy to w then, bo jak damy pod spodem to pamiętaj\n        // że axios działa wolniej, i zrealizuje nam fetch task najpierw\n      });\n\n    console.log(\"Task:\", task.completed);\n  };\n  render() {\n    let tasks = this.state.todoList;\n    return (\n      <div className=\"container\">\n        <div id=\"task-container\">\n          <div id=\"form-wrapper\">\n            <form id=\"form\" onSubmit={this.handleSubmit}>\n              <div className=\"flex-wrapper\">\n                <div style={{ flex: 6 }}>\n                  {/* The flex-grow property specifies how much \n                the item will grow relative to the rest of the flexible items inside the same container. */}\n                  <input\n                    onChange={this.handleChange}\n                    placeholder=\"Add task\"\n                    className=\"form-control\"\n                    id=\"title\"\n                    name=\"bry\"\n                    value={this.state.activeItem.title} //to nam wyczyści inputa po zatwierdzeniu\n                    // gdy activeItem resetuje swe wartości\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <input\n                    id=\"submit\"\n                    type=\"submit\"\n                    name=\"add\"\n                    className=\"btn btn-warning\"\n                    value=\"Submit\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div id=\"list-wrapper\">\n            {tasks.map((task, index) => (\n              <div key={index} className=\"task-wrapper flex-wrapper\">\n                <div\n                  onClick={() => this.strikeUnstrike(task)}\n                  style={{ flex: 7 }}\n                >\n                  {/* tutaj flex 7 a potem oznacza, że ten będzie 7x większy od 1, 14 2 2 zrobi to samo */}\n                  {task.completed == false ? (\n                    <span>{task.title}</span>\n                  ) : (\n                    <strike>{task.title}</strike>\n                  )}\n                </div>\n                <div style={{ flex: 1 }}>\n                  <button\n                    onClick={() => this.startEdit(task)}\n                    // musimy podać najpierw () bo inaczej odpali nam to od razu i będzie milion errorów\n                    className=\"btn btn-sm btn-outline-info\"\n                  >\n                    Edit\n                  </button>\n                  {/* przekazujemy argument task, który mamy w obecnej iteracji */}\n                </div>\n                <div style={{ flex: 1 }}>\n                  <button\n                    onClick={() => this.deleteItem(task)}\n                    className=\"btn btn-sm btn-outline-dark delete\"\n                  >\n                    -\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}